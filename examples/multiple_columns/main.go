package main

import (
	"github.com/ozgen/goreportx/examples/common"
	"github.com/ozgen/goreportx/internal/models"
	"github.com/ozgen/goreportx/internal/renderer"
	"github.com/ozgen/goreportx/internal/renderer/pdf"
	"html/template"
	"log"
	"path/filepath"
)

func main() {
	// Construct report data
	multiReport := models.MultipleColumnReport{
		ColumnHeaders: []string{"Name", "Score", "Status", "Grade Type", "Description", "Remarks"},
		Rows: [][]string{
			{"Alice", "90", "Pass", "A+", "Excellent performance in all subjects", "Well done"},
			{"Bob", "85", "Pass", "A", "Consistent work throughout the term", "Keep it up"},
			{"Charlie", "70", "Fail", "C", "Needs improvement in Math and Science", "Consider tutoring"},
		},
	}

	// Fill in meta fields
	multiReport.Header.Title = "Student Term Results"
	multiReport.Header.Subtitle = "2025 Academic Year - Term 1"
	multiReport.Header.Explanation = "This report summarizes the academic performance of students across various subjects."
	multiReport.Footer.Note = "Generated by GoReportX"

	multiReport.Chart.Title = "Score Distribution"
	multiReport.Chart.Description = "This chart visualizes the score distribution across the class."
	multiReport.Chart.Image = renderer.WrapChartAsHTML(common.GenerateChartBase64(), renderer.AlignCenter)

	// Load template
	tmplPath := filepath.Join("internal", "template", "defaults", "multiple_column_template.html")
	tmpl, err := template.ParseFiles(tmplPath)
	if err != nil {
		log.Fatalf("Template error: %v", err)
	}

	// Create renderer
	pdfRenderer := pdf.NewPDFRenderer(
		multiReport,
		tmpl,
		common.DefaultFontSizes,
		false, // No background/header/footer images
		"",
		"",
		"",
	)

	// Render PDF
	_, err = pdfRenderer.Render("examples/outputs/output-multi.pdf")
	if err != nil {
		log.Fatalf("Render error: %v", err)
	}

	log.Println("Multi-column report generated: output-multi.pdf")
}
