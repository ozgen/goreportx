package main

import (
	"github.com/ozgen/goreportx/examples/common"
	"github.com/ozgen/goreportx/pkg/core"
	"github.com/ozgen/goreportx/pkg/models"
	"github.com/ozgen/goreportx/pkg/renderer/json"
	"github.com/ozgen/goreportx/pkg/renderer/pdf"
	"html/template"
	"log"
	"path/filepath"
)

func main() {
	// Load images
	logoBase64 := core.LoadImageBase64("assets/logo.png")
	headerFooterBase64 := core.LoadImageBase64("assets/header_footer.png")
	logoHTML := core.WrapLogoAsHTML(logoBase64, core.AlignCenter)

	// Define charts
	charts := []models.Chart{
		{
			Title:       "Usage Overview",
			Description: "Chart showing daily user activity.",
			Tag:         core.WrapChartAsHTML(common.GenerateChartBase64(), core.AlignCenter),
			Order:       0,
		},
		{
			Title:       "Error Trends",
			Description: "Error spikes across regions.",
			Tag:         core.WrapChartAsHTML(common.GenerateChartBase64(), core.AlignRight),
			Order:       1,
		},
	}

	// Define report model
	report := models.Report{
		Header: models.Header{
			Title:       "Basic Report Example",
			Subtitle:    "Auto-generated by GoReportX",
			Explanation: "This report demonstrates basic rendering features.",
			Logo:        logoHTML,
		},
		Footer: models.Footer{
			Note: "Generated by GoReportX â€¢ All rights reserved.",
		},
		Data: map[string]string{
			"Customer": "Jane Doe",
			"Email":    "jane@example.com",
			"Project":  "AI Insights",
			"Status":   "Completed",
		},
		Charts: charts,
	}

	// Load template
	tmplPath := filepath.Join("pkg", "template", "defaults", "smart_template_new.html")
	tmpl, err := template.ParseFiles(tmplPath)
	if err != nil {
		log.Fatalf("Failed to parse template: %v", err)
	}

	// Create renderer factory
	factory := core.NewRendererFactory().
		WithFontSizes(common.DefaultFontSizes).
		WithFooterImage(headerFooterBase64).
		WithHeaderImage(headerFooterBase64).
		WithPageNumbers(true)

	// Create and use PDF renderer
	pdfRenderer := pdf.NewPDFRenderer(report, tmpl, factory)

	_, err = pdfRenderer.Render("examples/outputs/output-basic.pdf")
	if err != nil {
		log.Fatalf("Failed to render PDF: %v", err)
	}
	log.Println("PDF saved to output-basic.pdf")

	// Create and use JSON renderer
	jsonRenderer := json.NewJSONRenderer(report)

	_, err = jsonRenderer.Render("examples/outputs/output-basic.json")
	if err != nil {
		log.Fatalf("Failed to render JSON: %v", err)
	}
	log.Println("JSON saved to output-basic.json")
}
