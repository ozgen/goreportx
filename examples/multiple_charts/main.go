package main

import (
	"bytes"
	"encoding/base64"
	"github.com/ozgen/goreportx/examples/common"
	"github.com/ozgen/goreportx/internal/models"
	"github.com/ozgen/goreportx/internal/renderer"
	"github.com/ozgen/goreportx/internal/renderer/pdf"
	"github.com/wcharczuk/go-chart/v2"
	"html/template"
	"log"
	"path/filepath"
)

func main() {
	// Prepare base64 logo
	logo := renderer.WrapLogoAsHTML(renderer.LoadImageBase64("assets/logo.png"), renderer.AlignCenter)
	footerHeaderBase64 := renderer.LoadImageBase64("assets/header_footer.png")

	// Prepare multiple charts
	charts := []models.Chart{
		{
			Title:       "Login Activity",
			Description: "Tracks daily user logins.",
			Tag:         renderer.WrapChartAsHTML(generateChart("logins"), renderer.AlignLeft),
			Order:       1,
		},
		{
			Title:       "Page Views",
			Description: "Tracks daily page views.",
			Tag:         renderer.WrapChartAsHTML(generateChart("views"), renderer.AlignRight),
			Order:       2,
		},
		{
			Title:       "Errors",
			Description: "Tracks error rate trends.",
			Tag:         renderer.WrapChartAsHTML(generateChart("errors"), renderer.AlignCenter),
			Order:       3,
		},
	}

	report := models.Report{
		Header: models.Header{
			Title:       "Web Analytics Report",
			Subtitle:    "Dashboard Summary",
			Explanation: "This report highlights web app usage and performance.",
			Logo:        logo,
			LogoAlign:   string(renderer.AlignCenter),
		},
		Footer: models.Footer{
			Note: "Generated by GoReportX",
		},
		Data: map[string]string{
			"Period":     "April 2025",
			"Users":      "1245",
			"Sessions":   "3421",
			"BounceRate": "45.6%",
		},
		Charts: charts,
	}

	// Load template
	tmplPath := filepath.Join("internal", "template", "defaults", "smart_template_new.html")
	tmpl, err := template.ParseFiles(tmplPath)
	if err != nil {
		log.Fatalf("Template error: %v", err)
	}

	// PDF Renderer
	pdfRenderer := pdf.NewPDFRenderer(
		report,
		tmpl,
		common.DefaultFontSizes,
		true,
		"",
		footerHeaderBase64,
		footerHeaderBase64,
	)

	// Render output
	_, err = pdfRenderer.Render("output-multichart.pdf")
	if err != nil {
		log.Fatalf("Render error: %v", err)
	}
	log.Println("Multi-chart report generated: output-multichart.pdf")
}

func generateChart(label string) string {
	graph := chart.Chart{
		Title: label,
		Series: []chart.Series{
			chart.ContinuousSeries{
				XValues: []float64{1, 2, 3, 4, 5},
				YValues: []float64{5, 3, 4, 2, 6},
			},
		},
	}

	buffer := bytes.NewBuffer([]byte{})
	_ = graph.Render(chart.PNG, buffer)
	encoded := base64.StdEncoding.EncodeToString(buffer.Bytes())
	return "data:image/png;base64," + encoded
}
