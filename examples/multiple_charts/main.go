package main

import (
	"github.com/ozgen/goreportx/examples/common"
	"github.com/ozgen/goreportx/internal/models"
	"github.com/ozgen/goreportx/internal/pkg"
	"github.com/ozgen/goreportx/internal/renderer/pdf"
	"html/template"
	"log"
	"path/filepath"
)

func main() {
	// Load logo and footer/header images
	logo := pkg.WrapLogoAsHTML(pkg.LoadImageBase64("assets/logo.png"), pkg.AlignCenter)
	footerHeaderBase64 := pkg.LoadImageBase64("assets/header_footer.png")

	// Build multiple charts
	charts := []models.Chart{
		{
			Title:       "Login Activity",
			Description: "Tracks daily user logins.",
			Tag:         pkg.WrapChartAsHTML(common.GenerateChartBase64(), pkg.AlignLeft),
			Order:       1,
		},
		{
			Title:       "Page Views",
			Description: "Tracks daily page views.",
			Tag:         pkg.WrapChartAsHTML(common.GenerateChartBase64(), pkg.AlignRight),
			Order:       2,
		},
		{
			Title:       "Errors",
			Description: "Tracks error rate trends.",
			Tag:         pkg.WrapChartAsHTML(common.GenerateChartBase64(), pkg.AlignCenter),
			Order:       3,
		},
	}

	// Create report data
	report := models.Report{
		Header: models.Header{
			Title:       "Web Analytics Report",
			Subtitle:    "Dashboard Summary",
			Explanation: "This report highlights web app usage and performance.",
			Logo:        logo,
			LogoAlign:   string(pkg.AlignCenter),
		},
		Footer: models.Footer{
			Note: "Generated by GoReportX",
		},
		Data: map[string]string{
			"Period":     "April 2025",
			"Users":      "1245",
			"Sessions":   "3421",
			"BounceRate": "45.6%",
		},
		Charts: charts,
	}

	// Parse template
	tmplPath := filepath.Join("internal", "template", "defaults", "smart_template_new.html")
	tmpl, err := template.ParseFiles(tmplPath)
	if err != nil {
		log.Fatalf("Failed to load template: %v", err)
	}

	// Create renderer factory
	factory := pkg.NewRendererFactory().
		WithFontSizes(common.DefaultFontSizes).
		WithFooterImage(footerHeaderBase64).
		WithHeaderImage(footerHeaderBase64).
		WithPageNumbers(true)

	// Initialize PDF renderer using the factory
	pdfRenderer := pdf.NewPDFRenderer(report, tmpl, factory)

	// Render PDF
	_, err = pdfRenderer.Render("examples/outputs/output-multichart.pdf")
	if err != nil {
		log.Fatalf("Failed to render PDF: %v", err)
	}

	log.Println("Multi-chart PDF generated: examples/outputs/output-multichart.pdf")
}
